clc;

init;


h = 0.25; % Discretization time step
n = 4;    % number of states
m = 1;    % number of inputs

%% Define system parameters

A = [1 h  0           0; 
     0 1 -h*K_2       0; 
     0 0  1           h; 
     0 0 -h*K_1*K_pp (1-h*K_1*K_pd)];

B = [0; 
     0; 
     0; 
     h*K_1*K_pp];


%% Define objective function

lambda_0 = pi;
lambda_f = 0;

q = 1;   % input penalty
N = 100; % number of time steps / time horizont
t_sample = 0.25; % sampling time in seconds

h = diag([1, 0, 0, 0]);

H1 = kron(eye(N), h);
H2 = kron(eye(N), q);
H = blkdiag(H1, H2);
 
f = [-2*lambda_f 0 0 0]';
f = repmat(f,N,1);
f = [f' zeros(1,N)];

%% Define constraints

x0 = [lambda_0 0 0 0]';
xf = [lambda_f 0 0 0]';

Aeq = [kron(diag(ones(N-1,1), -1), -A) + eye(N * n), kron(eye(N*m),-B)];
beq = [A*x0; zeros((N-1)*n,1)];



p_k_constraint = 30*pi/180;
x_k_constraint = [ Inf Inf p_k_constraint Inf]';

lb = [repmat(-x_k_constraint,N,1); repmat(-p_k_constraint,N, 1)];
ub = [repmat(x_k_constraint,N,1); repmat(p_k_constraint,N, 1)];


startingpoint = [x0; zeros(5*N-4,1)];

x = quadprog(H, f, [], [], A_eq, b_eq, lb, ub);


u = x(4*N+1:end);


u = [zeros(20, 1); u; zeros(20,1)]; %% add 10 seconds before and after control input
 
t = 0.25:0.25:35;
t = t';

disp('plot')
figure(22)
stairs(t,u),grid













